// Generated by Dagger (https://dagger.dev).
package clock.data.manager;

import android.content.Context;

import javax.inject.Provider;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ScheduleAlarmManager_Factory implements Factory<ScheduleAlarmManager> {
  private final Provider<Context> applicationContextProvider;

  private final Provider<WorkRequestManager> workRequestManagerProvider;

  public ScheduleAlarmManager_Factory(Provider<Context> applicationContextProvider,
      Provider<WorkRequestManager> workRequestManagerProvider) {
    this.applicationContextProvider = applicationContextProvider;
    this.workRequestManagerProvider = workRequestManagerProvider;
  }

  @Override
  public ScheduleAlarmManager get() {
    return newInstance(applicationContextProvider.get(), workRequestManagerProvider.get());
  }

  public static ScheduleAlarmManager_Factory create(Provider<Context> applicationContextProvider,
      Provider<WorkRequestManager> workRequestManagerProvider) {
    return new ScheduleAlarmManager_Factory(applicationContextProvider, workRequestManagerProvider);
  }

  public static ScheduleAlarmManager newInstance(Context applicationContext,
      WorkRequestManager workRequestManager) {
    return new ScheduleAlarmManager(applicationContext, workRequestManager);
  }
}
