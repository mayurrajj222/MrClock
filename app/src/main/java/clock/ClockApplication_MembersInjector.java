// Generated by Dagger (https://dagger.dev).
package clock;

import com.yassineabou.clock.data.workManager.factory.WrapperWorkerFactory;

import javax.inject.Provider;

import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ClockApplication_MembersInjector implements MembersInjector<ClockApplication> {
  private final Provider<WrapperWorkerFactory> workerFactoryProvider;

  public ClockApplication_MembersInjector(Provider<WrapperWorkerFactory> workerFactoryProvider) {
    this.workerFactoryProvider = workerFactoryProvider;
  }

  public static MembersInjector<ClockApplication> create(
      Provider<WrapperWorkerFactory> workerFactoryProvider) {
    return new ClockApplication_MembersInjector(workerFactoryProvider);
  }

  @Override
  public void injectMembers(ClockApplication instance) {
    injectWorkerFactory(instance, workerFactoryProvider.get());
  }

  @InjectedFieldSignature("com.yassineabou.clock.ClockApplication.workerFactory")
  public static void injectWorkerFactory(ClockApplication instance,
      WrapperWorkerFactory workerFactory) {
    instance.workerFactory = workerFactory;
  }
}
